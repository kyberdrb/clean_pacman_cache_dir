@startuml
skinparam nodesep 80
skinparam ranksep 100

class main

class IgnoredPackageName {
    + IgnoredPackageName(\
        \n    ignoredPackageName : string)
    - name : string
}

main .u.> IgnoredPackageName : "<- creates one temporary IgnoredPackageName instance"
main *-u-> "ignoredPackageNames ->\n0..*" IgnoredPackageName

class Package {
    + Package(\
        \n    packageName : PackageName,\
        \n    locallyInstalledVersion : PackageVersion\
        \n    architecture : string\
        \n    isIgnored : bool)
    + Package(inferredPackageName : PackageName)
    + getName() : PackageName
    + getLocallyInstalledVersion() : PackageVersion
    + isPackageNameEmpty() : bool
    + hasStillSomethingInPackageName() : bool
    + getNextInferredPackageNameCandidate() : void
    + getStartingPositionForPackageVersion() : uint_fast8_t
    + getNumberOfInstallationPackageFilesForDifferentVersions()\
        \n    : uint_fast16_t
    + addPackageFileToDeletionCandidates(\
        \n    packageRelatedPackageFile : PackageFile) : void
    + movePackageFilesForDifferentVersionsToSeparateDir(\
        \n        pathToDirectoryForOtherVersionsOfPackageFiles : string)\
        \n    : void

    - std::unique_ptr<PackageName> name
    - std::unique_ptr<PackageVersion> locallyInstalledVersion
    - std::string architecture
    - bool isIgnored

    - installationPackageFilesForDifferentPackageVersions :\
        \n    std::vector<PackageFile>>
}

main ..> Package : "<- creates one temporary Package instance"
main *---> "installedPackages ->\n0..*" Package
Package *--> "0..*" PackageName
Package *--> "0..*" PackageVersion
Package *--> "installationPackageFilesForDifferentPackageVersions â†“\n0..*" PackageFile

class PackageFile {
    + PackageFile(absolutePath : string)
    + PackageFile(\
        \n    filname : string,\
        \n    absolutePath : string,\
        \n    relatedPackageName : PackageName,\
        \n    relatedPackageVersion : PackageVersion)
    + getAbsolutePath() : string
    + getFilename() : string
    + getRelatedPackageName() : PackageName
    + getRelatedPackageVersion() : PackageVersion
    - absolutePath : AbsolutePath
    - filename : Filename
    - relatedPackageName : PackageName
    - relatedPackageVersion : PackageVersion
    - type : ExtendedInstallationPackageFileType
}

main ..> PackageFile : "<- creates one temporary PackageFile instance"
main *--> "partiallyDownloadedPackageFiles\n0..*\n" PackageFile
main *--> "packageFilesRelatedToMissingPackages\n0..*\n" PackageFile

PackageFile -l-> "relatedPackageName ->\n1" PackageName : " references ""PackageName"" from ""Package"""
/'
The relationship between 'PackageFile' and 'PackageName'
 can also be modelled with 'shared_ptr' packageName member
 in Package and referenced to a 'weak_ptr' relatedPackageName
 member in PackageFile but I'll leave this as is now,
 because 'unique_ptr' with reference has less overhead
 than 'shared_ptr' with 'weak_ptr'
 because of the reference counting feature of 'shared_ptr'
'/

PackageFile *-u-> "relatedPackageVersion 1 ->" PackageVersion

class PackageName {
    + PackageName(name : string)
    + empty() : bool
    + at(position : size_t) : char
    + size() : size_t
    + pop_back() : void
    + string() : string

    - name : string
}

main ..> PackageName : "<- creates one temporary PackageName instance"

class PackageVersion {
    + PackageVersion(\
        \n    packageVersionAsText : string)
    + empty() : bool
    + getVersion() : string

    - version : string
}

main ..> PackageVersion : "<- creates one temporary PackageVersion instance"

@enduml
