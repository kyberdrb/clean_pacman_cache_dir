@startuml

'Proposed solutions to avoid assigning reference member attributes to temporary values in single-argument constructor:
' - Inheritance/Implementation of interface - a class with only pure virtual functions with commonfunctions
'   - overkill/not necessary - I don't use them in one container, neither I want to complicate my code with abstractions for simplicity and understandability
' - Splitting one 'PackageFile'
'   - to two classes
'   - then encapsulate the 'string' type 'filname' and 'absolutePath' member variables to custom defined classes 'Filename' and 'AbsolutePath' for expressivenes
'   - Accepted solution

class Package__the_original_one_before_refactoring {
    + Package(\
        \n    packageName : PackageName,\
        \n    locallyInstalledVersion : PackageVersion\
        \n    architecture : string\
        \n    isIgnored : bool)
    + Package(inferredPackageName : PackageName)
    + getName() : PackageName
    + getLocallyInstalledVersion() : PackageVersion
    + isPackageNameEmpty() : bool
    + hasStillSomethingInPackageName() : bool
    + getNextInferredPackageNameCandidate() : void
    + getStartingPositionForPackageVersion() : uint_fast8_t
    + getNumberOfInstallationPackageFilesForDifferentVersions()\
        \n    : uint_fast16_t
    + addPackageFileToDeletionCandidates(\
        \n    packageRelatedPackageFile : PackageFile) : void
    + movePackageFilesForDifferentVersionsToSeparateDir(\
        \n        pathToDirectoryForOtherVersionsOfPackageFiles : AbsolutePath)\
        \n    : void

    - std::unique_ptr<PackageName> name
    - std::unique_ptr<PackageVersion> locallyInstalledVersion
    - std::string architecture
    - bool isIgnored

    - installationPackageFilesForDifferentPackageVersions :\
        \n    std::vector<ExtendedInstallationPackageFile>>
}

'Analysis

'TODO make >>> abstract <<< from the 'class Package_refactored_' ?
class Package_refactored_ {
public:
    + Package_refactored_(packageName : PackageName)
    + {abstract} ~Package_refactored_()

    + getName() : PackageName

    + operator<<(out : ostream, package : Package_refactored_) : ostream
    # {abstract} streamOutputOperator(out : ostream) : ostream

    + operator<(package : Package_refactored_, anotherPackage : Package_refactored_) : bool
    # {abstract} lessThanOperator(Package_refactored_ anotherPackage) : bool

    # name : PackageName
}

note left of Package_refactored_: function ""operator<""\nand virtual function ""lessThanOperator""\nare overloaded for\n""reference_wrapper"" and\n""unique_ptr""\nto ""Package_refactored_"" class

Package_refactored_ *-r-> "1" PackageName

class PackageWithInferredName_refactored_ {
    + PackageWithInferredName_refactored_(extractedPackageNameAndVersionAsText : string)
    + isPackageNameEmpty() : bool
    + hasStillSomethingInPackageName() : bool
    + getNextInferredPackageNameCandidate() : void
    + extractPackageVersion() : PackageVersion
    # ostream streamOutputOperator(out : ostream)
    # lessThanOperator(anotherPackage : Package_refactored_) : bool

    - nameAndVersion : PackageNameAndVersion
    - getStartingPositionForPackageVersion() : uint_fast8_t
}

Package_refactored_ <|-d- PackageWithInferredName_refactored_
PackageWithInferredName_refactored_ ..> PackageVersion
PackageWithInferredName_refactored_ *--> PackageNameAndVersion

note bottom of PackageWithInferredName_refactored_: virtual function ""lessThanOperator""\nis overloaded for\n""reference_wrapper"" and\n""unique_ptr""\nto common abstract/virtual ""Package_refactored_"" base class

class LocallyInstalledPackage {
    + Package(\
    \n    packageName : PackageName,\
    \n    locallyInstalledVersion : PackageVersion,\
    \n    architecture : string,\
    \n    isIgnored : bool)
    + getName() : PackageName
    + getNumberOfInstallationPackageFilesForDifferentVersions() : uint_fast16_t
    + addPackageFileToDeletionCandidates(\
    \n    packageRelatedPackageFile : ExtendedInstallationPackageFile)\
    \n: bool
    + movePackageFilesForDifferentVersionsToSeparateDir(\
        \n    absolutePathToDirectoryForOtherVersionsOfInstallationPackageFiles : AbsolutePath)\
        \n: void
    - name : PackageName
    - locallyInstalledVersion : PackageVersion
    - architecture : string
    - isIgnored : bool

    - installationPackageFilesForDifferentPackageVersions\
    \n: vector<ExtendedInstallationPackageFile>
}

Package_refactored_ <|-d- LocallyInstalledPackage
@enduml
